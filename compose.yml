# this file is meant for Docker Swarm stacks only
# trying it in compose will fail because of multiple replicas trying to bind to the same port
# Swarm currently does not support Compose Spec, so we'll pin to the older version 3.9

# version: "3.9"

# services:

#   redis:
#     image: redis:alpine
#     networks:
#       - frontend

#   db:
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_USER: "postgres"
#       POSTGRES_PASSWORD: "postgres"
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     networks:
#       - backend

#   vote:
#     image: dockersamples/examplevotingapp_vote
#     ports:
#       - 8080:80
#     networks:
#       - frontend
#         #deploy:
#       # replicas: 2

#   result:
#     image: dockersamples/examplevotingapp_result
#     ports:
#       - 8081:80
#     networks:
#       - backend

#   worker:
#     image: dockersamples/examplevotingapp_worker
#     networks:
#       - frontend
#       - backend
#     deploy:
#       replicas: 2

# networks:
#   frontend:
#   backend:

# volumes:
#   db-data:


version: "3.8"

services:
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    networks:
      - frontend

  db:
    image: postgres:15-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  vote:
    image: dockersamples/examplevotingapp_vote
    container_name: vote
    restart: always
    ports:
      - "8080:80"
    depends_on:
      - redis
    networks:
      - frontend

  result:
    image: dockersamples/examplevotingapp_result
    container_name: result
    restart: always
    ports:
      - "8081:80"
    depends_on:
      - db
    networks:
      - backend

  worker:
    image: dockersamples/examplevotingapp_worker
    container_name: worker
    restart: always
    depends_on:
      - redis
      - db
    networks:
      - frontend
      - backend

volumes:
  db_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

